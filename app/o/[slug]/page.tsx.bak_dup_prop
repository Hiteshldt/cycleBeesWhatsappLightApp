'use client'

import React, { useEffect, useRef, useState } from 'react'
import { useParams, useRouter } from 'next/navigation'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { Request, RequestItem, Addon, ServiceBundle } from '@/lib/supabase'
import { formatCurrency, openWhatsApp, formatDate } from '@/lib/utils'
import { generateBillHTML, createBillDownload } from '@/lib/bill-generator'
import { getLaCartePrice } from '@/lib/lacarte'
import { Check, MessageCircle, AlertCircle, Download } from 'lucide-react'
import { getLaCarteSettings, type LaCarteSettings } from '@/lib/lacarte'
import { AppHeader } from '@/components/mobile/AppHeader'
import { StickyActionBar } from '@/components/mobile/StickyActionBar'
import { AppBottomNav } from '@/components/mobile/AppBottomNav'
import { showToast } from '@/components/mobile/Toast'

type OrderData = {
  request: Request
  items: (RequestItem & { selected?: boolean })[]
}

type ConfirmedData = {
  selectedItems: string[]
  selectedAddons: string[]
  selectedBundles: string[]
  totals: {
    subtotal: number
    addonsTotal: number
    bundlesTotal: number
    laCarteCharge: number
    total: number
  }
}

export default function PublicOrderPage() {
  const params = useParams()
  const router = useRouter()
  const slug = params.slug as string

  const [orderData, setOrderData] = useState<OrderData | null>(null)
  const [addons, setAddons] = useState<Addon[]>([])
  const [bundles, setBundles] = useState<ServiceBundle[]>([])
  const [isLoading, setIsLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [selectedItems, setSelectedItems] = useState<Set<string>>(new Set())
  const [selectedAddons, setSelectedAddons] = useState<Set<string>>(new Set())
  const [selectedBundles, setSelectedBundles] = useState<Set<string>>(new Set())
  const [hasViewedEstimate, setHasViewedEstimate] = useState(false)
  const [showConfirmation, setShowConfirmation] = useState(false)
  const [isConfirming, setIsConfirming] = useState(false)
  const [confirmedData, setConfirmedData] = useState<ConfirmedData | null>(null)
  const [laCarte, setLaCarte] = useState<LaCarteSettings | null>(null)
  // Mobile tabs (scroll-to-section)
  const [activeTab, setActiveTab] = useState<'services' | 'addons' | 'bundles' | 'summary'>('summary')
  const servicesRef = useRef<HTMLDivElement | null>(null)
  const addonsRef = useRef<HTMLDivElement | null>(null)
  const bundlesRef = useRef<HTMLDivElement | null>(null)
  const summaryRef = useRef<HTMLDivElement | null>(null)

  const scrollToSection = (tab: 'services' | 'addons' | 'bundles' | 'summary') => {
    setActiveTab(tab)
    const target = tab === 'services' ? servicesRef.current
      : tab === 'addons' ? addonsRef.current
      : tab === 'bundles' ? bundlesRef.current
      : summaryRef.current
    if (target) target.scrollIntoView({ behavior: 'smooth', block: 'start' })
  }

  useEffect(() => {
    if (slug) {
      fetchOrderData()
      fetchAddons()
      fetchBundles()
      loadSelections()
    }
  }, [slug])

  // Load La Carte settings for visual display (no change to totals)
  useEffect(() => {
    async function loadLaCarte() {
      try {
        const settings = await getLaCarteSettings()
        setLaCarte(settings)
      } catch (e) {
        // Fallback silently; UI will render defaults
        setLaCarte({ id: 'lacarte', real_price_paise: 9900, current_price_paise: 9900, discount_note: '', is_active: true })
      }
    }
    loadLaCarte()
  }, [])

  const loadSelections = () => {
    // Load selections from session storage
    const savedItems = sessionStorage.getItem(`selectedItems_${slug}`)
    const savedAddons = sessionStorage.getItem(`selectedAddons_${slug}`)
    const savedBundles = sessionStorage.getItem(`selectedBundles_${slug}`)
    
    if (savedItems) {
      setSelectedItems(new Set(JSON.parse(savedItems)))
    }
    
    if (savedAddons) {
      setSelectedAddons(new Set(JSON.parse(savedAddons)))
    }
    
    if (savedBundles) {
      setSelectedBundles(new Set(JSON.parse(savedBundles)))
    }
  }

  // Scroll-to-section handler from bottom nav
  

  // Scroll spy to update the active tab as user scrolls
  useEffect(() => {
    const sections: [HTMLElement | null, typeof activeTab][] = [
      [servicesRef.current, 'services'],
      [addonsRef.current, 'addons'],
      [bundlesRef.current, 'bundles'],
      [summaryRef.current, 'summary']
    ]
    const observer = new IntersectionObserver(
      (entries) => {
        const visible = entries
          .filter((e) => e.isIntersecting)
          .sort((a, b) => a.boundingClientRect.top - b.boundingClientRect.top)[0]
        if (!visible) return
        const node = visible.target as HTMLElement
        const match = sections.find(([el]) => el === node)
        if (match && match[1] !== activeTab) setActiveTab(match[1])
      },
      { root: null, rootMargin: '-45% 0px -50% 0px', threshold: [0, 1] }
    )
    sections.forEach(([el]) => el && observer.observe(el))
    return () => observer.disconnect()
  }, [servicesRef.current, addonsRef.current, bundlesRef.current, summaryRef.current, activeTab])

  const fetchOrderData = async () => {
    try {
      const response = await fetch(`/api/public/orders/${slug}`)
      if (!response.ok) {
        if (response.status === 404) {
          setError('Order not found or has expired.')
        } else {
          setError('Failed to load order details.')
        }
        return
      }

      const data = await response.json()
      setOrderData(data)

      // Pre-select all suggested items or load confirmed selections
      if (data.request.status === 'confirmed') {
        // For confirmed orders, load the actual confirmed selections
        try {
          const confirmedResponse = await fetch(`/api/requests/${data.request.id}/confirmed`)
          if (confirmedResponse.ok) {
            const confirmedData = await confirmedResponse.json()
            setSelectedItems(new Set(confirmedData.selectedItems))
            setSelectedAddons(new Set(confirmedData.selectedAddons))
            setSelectedBundles(new Set(confirmedData.selectedBundles || []))
            
            // Calculate totals directly from confirmed data (not from state which hasn't updated yet)
            const confirmedItems = data.items.filter((item: RequestItem & { selected?: boolean }) => 
              confirmedData.selectedItems.includes(item.id)
            )
            
            // We need to fetch addons and bundles to calculate totals
            let addonsTotal = 0
            let bundlesTotal = 0
            
            if (confirmedData.selectedAddons.length > 0) {
              try {
                const addonsResponse = await fetch('/api/addons')
                if (addonsResponse.ok) {
                  const addonsData = await addonsResponse.json()
                  const confirmedAddons = addonsData.filter((addon: Addon) =>
                    confirmedData.selectedAddons.includes(addon.id)
                  )
                  addonsTotal = confirmedAddons.reduce((sum: number, addon: Addon) => sum + addon.price_paise, 0)
                }
              } catch (error) {
                console.error('Error fetching addons for total calculation:', error)
              }
            }
            
            if (confirmedData.selectedBundles && confirmedData.selectedBundles.length > 0) {
              try {
                const bundlesResponse = await fetch('/api/bundles')
                if (bundlesResponse.ok) {
                  const bundlesData = await bundlesResponse.json()
                  const confirmedBundles = bundlesData.filter((bundle: ServiceBundle) =>
                    confirmedData.selectedBundles.includes(bundle.id)
                  )
                  bundlesTotal = confirmedBundles.reduce((sum: number, bundle: ServiceBundle) => sum + bundle.price_paise, 0)
                }
              } catch (error) {
                console.error('Error fetching bundles for total calculation:', error)
              }
            }
            
            const subtotal = confirmedItems.reduce((sum: number, item: RequestItem & { selected?: boolean }) => sum + item.price_paise, 0)
            const laCarteCharge = await getLaCartePrice()
            const total = subtotal + addonsTotal + bundlesTotal + laCarteCharge
            
            setConfirmedData({
              selectedItems: confirmedData.selectedItems,
              selectedAddons: confirmedData.selectedAddons,
              selectedBundles: confirmedData.selectedBundles || [],
              totals: { subtotal, addonsTotal, bundlesTotal, laCarteCharge, total }
            })
          }
        } catch (error) {
          console.error('Error loading confirmed selections:', error)
        }
      } else {
        // For non-confirmed orders, only pre-select suggested items if no selections exist in sessionStorage
        const savedItems = sessionStorage.getItem(`selectedItems_${slug}`)
        if (!savedItems) {
          // No saved selections, use suggested items
          const suggestedItemIds = new Set<string>(
            data.items.filter((item: RequestItem) => item.is_suggested).map((item: RequestItem) => item.id)
          )
          setSelectedItems(suggestedItemIds)
        }
      }

      // Mark as viewed if status is still draft/sent (support both)
      if (data.request.status === 'draft' || data.request.status === 'sent') {
        try {
          // Use saved selections or default to suggested items for marking as viewed
          const savedItems = sessionStorage.getItem(`selectedItems_${slug}`)
          const itemsToMark = savedItems 
            ? JSON.parse(savedItems)
            : data.items.filter((item: RequestItem) => item.is_suggested).map((item: RequestItem) => item.id)
          
          await fetch(`/api/public/orders/${slug}/view`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              selected_items: itemsToMark,
              status: 'viewed'
            }),
          })
          setHasViewedEstimate(true)
          // Update local status
          setOrderData({
            ...data,
            request: { ...data.request, status: 'viewed' }
          })
        } catch (error) {
          console.error('Error marking as viewed:', error)
        }
      }
    } catch (error) {
      console.error('Error fetching order data:', error)
      setError('Failed to load order details.')
    } finally {
      setIsLoading(false)
    }
  }

  const fetchAddons = async () => {
    try {
      const response = await fetch('/api/addons')
      if (response.ok) {
        const data = await response.json()
        setAddons(data)
      }
    } catch (error) {
      console.error('Error fetching addons:', error)
    }
  }

  const fetchBundles = async () => {
    try {
      const response = await fetch('/api/bundles')
      if (response.ok) {
        const data = await response.json()
        setBundles(data)
      }
    } catch (error) {
      console.error('Error fetching bundles:', error)
    }
  }

  const toggleItemSelection = (itemId: string) => {
    const newSelected = new Set(selectedItems)
    if (newSelected.has(itemId)) {
      newSelected.delete(itemId)
    } else {
      newSelected.add(itemId)
    }
    setSelectedItems(newSelected)
  }

  const toggleAddonSelection = (addonId: string) => {
    const newSelected = new Set(selectedAddons)
    if (newSelected.has(addonId)) {
      newSelected.delete(addonId)
    } else {
      newSelected.add(addonId)
    }
    setSelectedAddons(newSelected)
  }

  const calculateTotal = () => {
    if (!orderData) return { subtotal: 0, addonsTotal: 0, bundlesTotal: 0, laCarteCharge: 0, total: 0 }

    const subtotal = orderData.items
      .filter(item => selectedItems.has(item.id))
      .reduce((sum, item) => sum + item.price_paise, 0)
    
    // Calculate selected addons total
    const addonsTotal = addons
      .filter(addon => selectedAddons.has(addon.id))
      .reduce((sum, addon) => sum + addon.price_paise, 0)
    
    // Calculate selected bundles total
    const bundlesTotal = bundles
      .filter(bundle => selectedBundles.has(bundle.id))
      .reduce((sum, bundle) => sum + bundle.price_paise, 0)
    
    // Add fixed La Carte Services charge (â‚¹99)
    const laCarteCharge = 9900 // â‚¹99 in paise
    const total = subtotal + addonsTotal + bundlesTotal + laCarteCharge

    return { subtotal, addonsTotal, bundlesTotal, laCarteCharge, total }
  }

  const handleConfirmOrder = () => {
    const totals = calculateTotal()
    if (totals.total < 9900) {
      showToast('Please select at least one service (La Carte included).', 'error')
      return
    }
    
    // Show confirmation dialog
    setShowConfirmation(true)
  }

  const handleNeedHelp = () => {
    if (!orderData) return
    // Support contact number: +91 95973 12212
    const supportNumberIntl = '919597312212'
    const message = `Hi, I need help with my service estimate for ${orderData.request.bike_name} (Order ${orderData.request.order_id}). Can you please assist me?`
    openWhatsApp(supportNumberIntl, message)
  }

  const handleFinalConfirmation = async () => {
    if (!orderData) return
    
    setIsConfirming(true)
    
    try {
      // Mark as viewed and confirmed
      await fetch(`/api/public/orders/${slug}/view`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          selected_items: Array.from(selectedItems),
          selected_addons: Array.from(selectedAddons),
          selected_bundles: Array.from(selectedBundles),
          status: 'confirmed'
        }),
      })
      
      // Update local state
      setHasViewedEstimate(true)
      setShowConfirmation(false)
      // Mark request as confirmed locally so UI updates without refresh
      setOrderData(prev => prev ? ({
        ...prev,
        request: { ...prev.request, status: 'confirmed' }
      }) : prev)
      
      // Store confirmed data for PDF download
      const totals = calculateTotal()
      setConfirmedData({
        selectedItems: Array.from(selectedItems),
        selectedAddons: Array.from(selectedAddons),
        selectedBundles: Array.from(selectedBundles),
        totals
      })
      // Persist selections to sessionStorage for consistency
      sessionStorage.setItem(`selectedItems_${slug}`, JSON.stringify(Array.from(selectedItems)))
      sessionStorage.setItem(`selectedAddons_${slug}`, JSON.stringify(Array.from(selectedAddons)))
      sessionStorage.setItem(`selectedBundles_${slug}`, JSON.stringify(Array.from(selectedBundles)))
      
      // Show success message
      showToast('Order confirmed successfully!', 'success')
      
    } catch (error) {
      console.error('Error confirming order:', error)
      showToast('Failed to confirm order. Please try again.', 'error')
    } finally {
      setIsConfirming(false)
    }
  }

  const handleDownloadConfirmedPDF = async () => {
    if (!orderData || !confirmedData) return

    // Get confirmed items data
    const confirmedItems = orderData.items.filter(item => 
      confirmedData.selectedItems.includes(item.id)
    )
    
    // Get confirmed addons data  
    const confirmedAddons = addons.filter(addon =>
      confirmedData.selectedAddons.includes(addon.id)
    )
    // Get confirmed bundles data
    const confirmedBundles = bundles.filter(bundle =>
      (confirmedData.selectedBundles || []).includes(bundle.id)
    )

    const subtotal = confirmedItems.reduce((sum, item) => sum + item.price_paise, 0)
    const addonsTotal = confirmedAddons.reduce((sum, addon) => sum + addon.price_paise, 0)
    const bundlesTotal = confirmedBundles.reduce((sum, bundle) => sum + bundle.price_paise, 0)
    const laCarteCharge = await getLaCartePrice()
    const total = subtotal + addonsTotal + bundlesTotal + laCarteCharge

    // Generate confirmed order PDF
    const billData = {

      order_id: orderData.request.order_id,
      customer_name: orderData.request.customer_name,
      bike_name: orderData.request.bike_name,
      created_at: orderData.request.created_at,
      confirmed_at: new Date().toISOString(),
      items: confirmedItems,
      addons: confirmedAddons.map(addon => ({
        name: addon.name,
        description: addon.description ?? undefined,
        price_paise: addon.price_paise
      })),
      bundles: confirmedBundles.map(bundle => ({
        name: bundle.name,
        description: bundle.description ?? undefined,
        price_paise: bundle.price_paise
      })),
      subtotal_paise: subtotal,
      addons_paise: addonsTotal,
      bundles_paise: bundlesTotal,
      lacarte_paise: laCarteCharge,
      total_paise: total,
      status: 'confirmed'
    }

    const html = generateBillHTML(billData)
    const filename = `Confirmed_Order_${orderData.request.order_id}.pdf`
    createBillDownload(html, filename)
  }

  if (isLoading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto"></div>
          <p className="mt-4 text-gray-600">Loading your service estimate...</p>
        </div>
      </div>
    )
  }

  // If order is confirmed, show read-only summary with download option
  if (orderData?.request.status === 'confirmed') {
    const totalSubtotal = confirmedData
      ? orderData.items.filter(i => confirmedData.selectedItems.includes(i.id)).reduce((s, i) => s + i.price_paise, 0)
      : 0
    const totalAddons = confirmedData
      ? addons.filter(a => confirmedData.selectedAddons.includes(a.id)).reduce((s, a) => s + a.price_paise, 0)
      : 0
    const totalBundles = confirmedData
      ? bundles.filter(b => (confirmedData.selectedBundles || []).includes(b.id)).reduce((s, b) => s + b.price_paise, 0)
      : 0

    return (
      <div className="min-h-screen bg-gray-50">
        <div className="max-w-3xl mx-auto px-4 py-8">
          <div className="bg-white rounded-lg shadow p-6 mb-6">
            <h1 className="text-2xl font-bold text-gray-900 mb-2">Order Confirmed</h1>
            <p className="text-gray-700">Thank you! Your service order is confirmed. Our team will contact you shortly.</p>
          </div>

          <div className="bg-white rounded-lg shadow p-6 mb-6">
            <h2 className="text-lg font-semibold text-gray-900 mb-4">Summary</h2>
            <div className="space-y-2">
              <div className="flex justify-between text-gray-700">
                <span>Selected Services</span>
                <span>{formatCurrency(totalSubtotal)}</span>
              </div>
              {totalAddons > 0 && (
                <div className="flex justify-between text-gray-700">
                  <span>Add-on Services</span>
                  <span>{formatCurrency(totalAddons)}</span>
                </div>
              )}
              {totalBundles > 0 && (
                <div className="flex justify-between text-gray-700">
                  <span>Service Bundles</span>
                  <span>{formatCurrency(totalBundles)}</span>
                </div>
              )}
            </div>
          </div>

          <div className="bg-white rounded-lg shadow p-6 space-y-3">
            <Button onClick={handleDownloadConfirmedPDF} className="w-full">
              <Download className="h-4 w-4 mr-2" /> Download Confirmed Order PDF
            </Button>
            <Button
              variant="outline"
              className="w-full"
              onClick={() => {
                if (!orderData) return
                const supportNumberIntl = '919597312212'
                const message = `Hi, I need help with my confirmed service order for ${orderData.request.bike_name} (Order ${orderData.request.order_id}).`
                openWhatsApp(supportNumberIntl, message)
              }}
            >
              <MessageCircle className="h-4 w-4 mr-2" /> Need Help? Contact Us on WhatsApp
            </Button>
          </div>
        </div>
      </div>
    )
  }

  if (error || !orderData) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <AlertCircle className="h-12 w-12 text-red-500 mx-auto mb-4" />
          <h1 className="text-2xl font-bold text-gray-900 mb-2">Oops!</h1>
          <p className="text-gray-600 mb-4">{error || 'Something went wrong'}</p>
          <Button onClick={() => window.location.reload()}>
            Try Again
          </Button>
        </div>
      </div>
    )
  }

  const { request, items } = orderData
  const repairItems = items.filter(item => item.section === 'repair')
  const replacementItems = items.filter(item => item.section === 'replacement')
  const totals = calculateTotal()

  // If order is not confirmed and no selections in session storage, redirect to services page
  if (request.status !== 'confirmed') {
    const hasSelections = sessionStorage.getItem(`selectedItems_${slug}`) || 
                         sessionStorage.getItem(`selectedAddons_${slug}`)
    
    if (!hasSelections) {
      router.replace(`/o/${slug}/services`)
      return null
    }
  }

  // Check if order is cancelled
  if (request.status === 'cancelled') {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="bg-white p-8 rounded-lg shadow-md text-center max-w-md">
          <AlertCircle className="h-16 w-16 text-red-500 mx-auto mb-4" />
          <h1 className="text-2xl font-bold text-gray-900 mb-2">Order Cancelled</h1>
          <p className="text-gray-600 mb-4">
            This service request has been cancelled. If you have any questions, please contact us.
          </p>
          <Button onClick={handleNeedHelp} variant="outline">
            <MessageCircle className="h-4 w-4 mr-2" />
            Contact Us
          </Button>
        </div>
      </div>
    )
  }

  /*
  // Check if order is already confirmed
  if (request.status === 'confirmed') {
    return (
      <div className="min-h-screen bg-gray-50 p-0">
        <AppHeader title="Order Confirmed" subtitle={`${request.bike_name} â€¢ ${request.order_id}`} />
        <div className="flex items-center justify-center p-4">
        <div className="bg-white p-6 rounded-lg shadow-md text-center w-full max-w-md">
          <div className="h-12 w-12 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-3">
            <Check className="h-6 w-6 text-green-600" />
          </div>
          <h1 className="text-lg font-bold text-gray-900 mb-2">Order Confirmed!</h1>
          <p className="text-sm text-gray-600 mb-4">
            Service request for {request.bike_name} confirmed. 
            We&apos;ll contact you soon!
          </p>
          <div className="bg-gray-50 p-3 rounded-lg mb-4">
            <p className="text-xs text-gray-700">Order ID: <strong className="text-sm">#{request.order_id.replace('CB', '')}</strong></p>
          </div>
          
          <div className="flex flex-col gap-2">
            <Button 
              onClick={handleDownloadConfirmedPDF} 
              className="w-full bg-blue-600 hover:bg-blue-700 text-sm"
            >
              <Download className="h-4 w-4 mr-2" />
              Download PDF
            </Button>
            <Button onClick={handleNeedHelp} variant="outline" className="w-full text-sm">
              <MessageCircle className="h-4 w-4 mr-2" />
              Need Help?
            </Button>
          </div>
        </div>
      </div>
      )
  }
  */

  return (
    <div className="min-h-screen bg-gray-50 pb-40">
      <AppHeader title="Service Estimate" subtitle={`${request.bike_name} â€¢ ${request.order_id}`} rightSlot={<Badge className="bg-[#FFD11E] text-gray-900">{request.status}</Badge>} />

      <div className="max-w-3xl mx-auto px-4 py-6">
        {/* Progress Indicator - Mobile Optimized */}
        <div className="flex justify-center mb-6">
          <div className="flex items-center max-w-full overflow-x-auto">
            <div className="flex items-center text-green-600 whitespace-nowrap">
              <div className="w-6 h-6 bg-green-600 rounded-full flex items-center justify-center text-white text-xs font-bold">
                âœ“
              </div>
              <span className="ml-1 text-xs font-medium hidden sm:inline">Services</span>
            </div>
            <div className="mx-2 w-8 h-1 bg-green-600 rounded flex-shrink-0"></div>
            <div className="flex items-center text-green-600 whitespace-nowrap">
              <div className="w-6 h-6 bg-green-600 rounded-full flex items-center justify-center text-white text-xs font-bold">
                âœ“
              </div>
              <span className="ml-1 text-xs font-medium hidden sm:inline">Add-ons</span>
            </div>
            <div className="mx-2 w-8 h-1 bg-blue-600 rounded flex-shrink-0"></div>
            <div className="flex items-center text-blue-600 whitespace-nowrap">
              <div className="w-6 h-6 bg-blue-600 rounded-full flex items-center justify-center text-white text-xs font-bold">
                3
              </div>
              <span className="ml-1 text-xs font-medium hidden sm:inline">Confirm</span>
            </div>
          </div>
        </div>

        {/* Edit Options - Mobile Optimized */}
        <div className="bg-blue-50 border border-blue-200 rounded-lg p-3 mb-4">
          <div className="flex flex-col sm:flex-row sm:items-center justify-between gap-3">
            <div>
              <h3 className="font-medium text-blue-900 text-sm">Ready to confirm?</h3>
              <p className="text-xs text-blue-700 mt-1">Review selections or make changes</p>
            </div>
            <div className="flex gap-2 w-full sm:w-auto">
              <Button
                variant="outline"
                size="sm"
                onClick={() => router.push(`/o/${slug}/services`)}
                className="border-blue-300 text-blue-700 hover:bg-blue-100 flex-1 sm:flex-none text-xs"
              >
                Edit Services
              </Button>
              <Button
                variant="outline"
                size="sm"
                onClick={() => router.push(`/o/${slug}/addons`)}
                className="border-blue-300 text-blue-700 hover:bg-blue-100 flex-1 sm:flex-none text-xs"
              >
                Edit Add-ons
              </Button>
            </div>
          </div>
        </div>

        {/* Order Summary - Mobile Optimized */}
        <div className="bg-white rounded-lg shadow-sm p-4 mb-4">
          <h2 className="text-base font-semibold text-gray-900 mb-3">
            Estimate: {request.bike_name}
          </h2>
          <p className="text-sm text-gray-600 mb-3">
            Review selections before confirming
          </p>
          
          <div className="grid grid-cols-1 sm:grid-cols-2 gap-3 bg-gray-50 p-3 rounded-lg">
            <div>
              <p className="text-xs text-gray-600">Customer</p>
              <p className="text-sm font-medium">{request.customer_name}</p>
            </div>
            <div>
              <p className="text-xs text-gray-600">Bike</p>
              <p className="text-sm font-medium">{request.bike_name}</p>
            </div>
            <div className="sm:col-span-2">
              <p className="text-xs text-gray-600">Created</p>
              <p className="text-sm font-medium">{formatDate(request.created_at)}</p>
            </div>
          </div>
        </div>

        {/* Selected Repair Services */}
        {repairItems.filter(item => selectedItems.has(item.id)).length > 0 && (
          <div ref={servicesRef} className="bg-white rounded-lg shadow-sm p-4 mb-4">
            <h3 className="text-base font-semibold text-gray-900 mb-3">Repair Services</h3>
            <div className="space-y-2">
              {repairItems.filter(item => selectedItems.has(item.id)).map((item) => (
                <div
                  key={item.id}
                  className="flex items-center justify-between p-3 rounded-lg border border-green-200 bg-green-50"
                >
                  <div className="flex items-center flex-1 min-w-0">
                    <div className="w-4 h-4 rounded border-2 border-green-500 bg-green-500 mr-2 flex items-center justify-center flex-shrink-0">
                      <Check className="h-2 w-2 text-white" />
                    </div>
                    <div className="min-w-0 flex-1">
                      <p className="text-sm font-medium text-gray-900 truncate">{item.label}</p>
                      {item.is_suggested && (
                        <p className="text-xs text-green-600">Recommended</p>
                      )}
                    </div>
                  </div>
                  <div className="text-sm font-semibold text-gray-900 ml-2 flex-shrink-0">
                    {formatCurrency(item.price_paise)}
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}

        {/* Selected Replacement Parts */}
        {replacementItems.filter(item => selectedItems.has(item.id)).length > 0 && (
          <div className="bg-white rounded-lg shadow-sm p-6 mb-6">
            <h3 className="text-lg font-semibold text-gray-900 mb-4">Selected Replacement Parts</h3>
            <div className="space-y-3">
              {replacementItems.filter(item => selectedItems.has(item.id)).map((item) => (
                <div
                  key={item.id}
                  className="flex items-center justify-between p-4 rounded-lg border border-green-200 bg-green-50"
                >
                  <div className="flex items-center">
                    <div className="w-5 h-5 rounded border-2 border-green-500 bg-green-500 mr-3 flex items-center justify-center">
                      <Check className="h-3 w-3 text-white" />
                    </div>
                    <div>
                      <p className="font-medium text-gray-900">{item.label}</p>
                      {item.is_suggested && (
                        <p className="text-sm text-green-600">Recommended</p>
                      )}
                    </div>
                  </div>
                  <div className="text-lg font-semibold text-gray-900">
                    {formatCurrency(item.price_paise)}
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}

        {/* Selected Add-on Services */}
        {addons.filter(addon => selectedAddons.has(addon.id)).length > 0 && (
          <div ref={addonsRef} className="bg-white rounded-lg shadow-sm p-6 mb-6">
            <h3 className="text-lg font-semibold text-gray-900 mb-4">Selected Add-on Services</h3>
            <div className="space-y-3">
              {addons.filter(addon => selectedAddons.has(addon.id)).map((addon) => (
                <div
                  key={addon.id}
                  className="flex items-center justify-between p-4 rounded-lg border border-green-200 bg-green-50"
                >
                  <div className="flex items-center">
                    <div className="w-5 h-5 rounded border-2 border-green-500 bg-green-500 mr-3 flex items-center justify-center">
                      <Check className="h-3 w-3 text-white" />
                    </div>
                    <div>
                      <p className="font-medium text-gray-900">{addon.name}</p>
                      {addon.description && (
                        <p className="text-sm text-gray-600">{addon.description}</p>
                      )}
                    </div>
                  </div>
                  <div className="text-lg font-semibold text-gray-900">
                    {formatCurrency(addon.price_paise)}
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}

        {/* Selected Service Bundles */}
        {bundles.filter(bundle => selectedBundles.has(bundle.id)).length > 0 && (
          <div ref={bundlesRef} className="bg-white rounded-lg shadow-sm p-6 mb-6">
            <h3 className="text-lg font-semibold text-gray-900 mb-4">Selected Service Bundles</h3>
            <div className="space-y-4">
              {bundles.filter(bundle => selectedBundles.has(bundle.id)).map((bundle) => (
                <div
                  key={bundle.id}
                  className="rounded-lg border border-green-200 bg-green-50"
                >
                  <div className="p-4">
                    <div className="flex items-start justify-between mb-3">
                      <div className="flex items-start">
                        <div className="w-5 h-5 rounded border-2 border-green-500 bg-green-500 mr-3 flex items-center justify-center mt-1">
                          <Check className="h-3 w-3 text-white" />
                        </div>
                        <div className="flex-1">
                          <h4 className="font-semibold text-lg text-gray-900">{bundle.name}</h4>
                          {bundle.description && (
                            <p className="text-sm text-gray-600 mt-1">{bundle.description}</p>
                          )}
                        </div>
                      </div>
                      <div className="text-xl font-bold text-gray-900">
                        {formatCurrency(bundle.price_paise)}
                      </div>
                    </div>
                    <div className="ml-8">
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-2">
                        {bundle.bullet_points.map((point, index) => (
                          <div key={index} className="flex items-start gap-2">
                            <span className="text-green-600 mt-1 text-sm">â€¢</span>
                            <span className="text-sm text-gray-700">{point}</span>
                          </div>
                        ))}
                      </div>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}

        {/* La Carte Services Section */}
        <div ref={summaryRef} className="bg-white rounded-lg shadow-sm p-6 mb-6">
          <h3 className="text-lg font-semibold text-gray-900 mb-4">La Carte Services (Fixed charges - Free Services included below)</h3>
          <div className="space-y-3">
            <div className="flex items-center justify-between p-4 rounded-lg border-2 border-blue-500 bg-blue-50 cursor-not-allowed">
              <div className="flex items-center">
                <div className="w-5 h-5 rounded border-2 border-blue-500 bg-blue-500 mr-3 flex items-center justify-center">
                  <Check className="h-3 w-3 text-white" />
                </div>
                <div>
                  <p className="font-medium text-gray-900">Complete Service Package</p>
                  <p className="text-sm text-blue-600">Always Included - Fixed Price</p>
                  <p className="text-xs text-gray-600 mt-1">
                    General service & inspection report, full cleaning, tyre puncture check, 
                    air filling, oiling & lubrication, fitting & repair labour, 
                    tightening of loose parts, and pick & drop or full service at your doorstep
                  </p>
                  {laCarte && (
                    <div className="mt-2 text-xs">
                      {laCarte.real_price_paise > laCarte.current_price_paise ? (
                        <div className="flex items-center gap-2">
                          <span className="line-through text-gray-400">{formatCurrency(laCarte.real_price_paise)}</span>
                          <span className="text-green-700 font-semibold">{formatCurrency(laCarte.current_price_paise)}</span>
                          <span className="px-1.5 py-0.5 bg-green-50 text-green-700 border border-green-200 rounded">
                            -{Math.round(((laCarte.real_price_paise - laCarte.current_price_paise) / Math.max(laCarte.real_price_paise, 1)) * 100)}%
                          </span>
                        </div>
                      ) : (
                        <span className="text-gray-500">{formatCurrency(laCarte.current_price_paise)}</span>
                      )}
                      {laCarte.real_price_paise > laCarte.current_price_paise && laCarte.discount_note && (
                        <div className="text-[11px] text-gray-500 mt-0.5">{laCarte.discount_note}</div>
                      )}
                    </div>
                  )}
                </div>
              </div>
              <div className="text-right">
                {laCarte && laCarte.real_price_paise > laCarte.current_price_paise ? (
                  <div className="flex items-center gap-2 justify-end">
                    <span className="line-through text-gray-400 text-sm">{formatCurrency(laCarte.real_price_paise)}</span>
                    <span className="text-lg font-semibold text-green-700">{formatCurrency(laCarte.current_price_paise)}</span>
                    <span className="px-1.5 py-0.5 bg-green-50 text-green-700 border border-green-200 rounded text-xs">
                      -{Math.round(((laCarte.real_price_paise - laCarte.current_price_paise) / Math.max(laCarte.real_price_paise, 1)) * 100)}%
                    </span>
                  </div>
                ) : (
                  <span className="text-lg font-semibold text-gray-900">{formatCurrency(9900)}</span>
                )}
              </div>
            </div>
          </div>
        </div>

        {/* Total Summary */}
        <div className="bg-white rounded-lg shadow-sm p-6 mb-6">
          <h3 className="text-lg font-semibold text-gray-900 mb-4">Order Summary</h3>
          <div className="space-y-2">
            <div className="flex justify-between text-gray-700">
              <span>Selected Services ({selectedItems.size} items)</span>
              <span>{formatCurrency(totals.subtotal)}</span>
            </div>
            {selectedAddons.size > 0 && (
              <div className="flex justify-between text-gray-700">
                <span>Add-on Services ({selectedAddons.size} items)</span>
                <span>{formatCurrency(totals.addonsTotal)}</span>
              </div>
            )}
            {selectedBundles.size > 0 && (
              <div className="flex justify-between text-gray-700">
                <span>Service Bundles ({selectedBundles.size} items)</span>
                <span>{formatCurrency(totals.bundlesTotal)}</span>
              </div>
            )}
            <div className="flex justify-between text-gray-700">
              <div className="flex flex-col">
                <span>La Carte Services (Fixed)</span>
                {laCarte && (
                  <div className="text-xs mt-1">
                    {laCarte.real_price_paise > laCarte.current_price_paise ? (
                      <div className="flex items-center gap-2">
                        <span className="line-through text-gray-400">{formatCurrency(laCarte.real_price_paise)}</span>
                        <span className="text-green-600 font-semibold">{formatCurrency(laCarte.current_price_paise)}</span>
                        <span className="px-1.5 py-0.5 bg-green-50 text-green-700 border border-green-200 rounded">
                          -{Math.round(((laCarte.real_price_paise - laCarte.current_price_paise) / Math.max(laCarte.real_price_paise, 1)) * 100)}%
                        </span>
                      </div>
                    ) : (
                      <span className="text-gray-500">{formatCurrency(laCarte.current_price_paise)}</span>
                    )}
                    {laCarte.real_price_paise > laCarte.current_price_paise && laCarte.discount_note && (
                      <div className="text-[11px] text-gray-500 mt-0.5">{laCarte.discount_note}</div>
                    )}
                  </div>
                )}
              </div>
              <span>{formatCurrency(9900)}</span>
            </div>
            <div className="border-t pt-2 mt-2">
              <div className="flex justify-between text-lg font-bold text-gray-900">
                <span>Total Amount (GST Inclusive)</span>
                <span>{formatCurrency(totals.total)}</span>
              </div>
            </div>
          </div>
        </div>

        {/* Action Buttons */}
        <div className="space-y-3">
          <Button
            onClick={handleConfirmOrder}
            disabled={false}
            className="w-full h-12 text-lg bg-green-600 hover:bg-green-700"
            size="lg"
          >
            <Check className="h-5 w-5 mr-2" />
            Confirm Complete Order - {formatCurrency(totals.total)}
          </Button>

          <Button
            onClick={handleNeedHelp}
            variant="outline"
            className="w-full h-10"
          >
            <MessageCircle className="h-4 w-4 mr-2" />
            Need Help?
          </Button>
        </div>

        {/* Confirmation Modal */}
        {showConfirmation && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
            <div className="bg-white rounded-lg shadow-lg max-w-md w-full p-6">
              <h3 className="text-lg font-semibold text-gray-900 mb-4">
                Confirm Your Order
              </h3>
              
              <div className="mb-4">
                <div className="bg-gray-50 p-4 rounded-lg">
                  <div className="flex justify-between text-sm">
                    <span>Selected Services ({selectedItems.size} items)</span>
                    <span>{formatCurrency(totals.subtotal)}</span>
                  </div>
                  {selectedAddons.size > 0 && (
                    <div className="flex justify-between text-sm mt-1">
                      <span>Add-on Services ({selectedAddons.size} items)</span>
                      <span>{formatCurrency(totals.addonsTotal)}</span>
                    </div>
                  )}
                  {selectedBundles.size > 0 && (
                    <div className="flex justify-between text-sm mt-1">
                      <span>Service Bundles ({selectedBundles.size} items)</span>
                      <span>{formatCurrency(totals.bundlesTotal)}</span>
                    </div>
                  )}
                  <div className="flex justify-between text-sm mt-1">
                    <div className="flex flex-col">
                      <span>La Carte Services</span>
                      {laCarte && (
                        <div className="text-[11px] mt-0.5">
                          {laCarte.real_price_paise > laCarte.current_price_paise ? (
                            <div className="flex items-center gap-1.5">
                              <span className="line-through text-gray-400">{formatCurrency(laCarte.real_price_paise)}</span>
                              <span className="text-green-600 font-semibold">{formatCurrency(laCarte.current_price_paise)}</span>
                              <span className="px-1 bg-green-50 text-green-700 border border-green-200 rounded">
                                -{Math.round(((laCarte.real_price_paise - laCarte.current_price_paise) / Math.max(laCarte.real_price_paise, 1)) * 100)}%
                              </span>
                            </div>
                          ) : (
                            <span className="text-gray-500">{formatCurrency(laCarte.current_price_paise)}</span>
                          )}
                          {laCarte.real_price_paise > laCarte.current_price_paise && laCarte.discount_note && (
                            <div className="text-[10px] text-gray-500 mt-0.5">{laCarte.discount_note}</div>
                          )}
                        </div>
                      )}
                    </div>
                    <span>{formatCurrency(9900)}</span>
                  </div>
                  <div className="border-t pt-2 mt-2">
                    <div className="flex justify-between font-bold">
                      <span>Total Amount</span>
                      <span>{formatCurrency(totals.total)}</span>
                    </div>
                  </div>
                </div>
              </div>

              <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4 mb-4">
                <p className="text-sm text-yellow-800">
                  <strong>Important:</strong> This is the rough amount that you will be charged upon the successful completion of your service. 
                  Please note that the final charges may vary slightly due to additional services or parts that may be required during the service.
                </p>
              </div>

              <div className="flex gap-3">
                <Button
                  onClick={() => setShowConfirmation(false)}
                  variant="outline"
                  className="flex-1"
                  disabled={isConfirming}
                >
                  Cancel
                </Button>
                <Button
                  onClick={handleFinalConfirmation}
                  className="flex-1 bg-green-600 hover:bg-green-700"
                  disabled={isConfirming}
                >
                  {isConfirming ? 'Confirming...' : 'Confirm Order'}
                </Button>
              </div>
            </div>
          </div>
        )}

        {/* Footer */}
        <div className="text-center mt-8 text-sm text-gray-500">
          <p>Step 3 of 3: Review and confirm your complete order</p>
          <p className="mt-1">Questions? Contact us on WhatsApp</p>
        </div>
        <div className="h-24" />
      </div>
      <StickyActionBar
        totalPaise={totals.total}
        primaryLabel={isConfirming ? 'Confirmingâ€¦' : `Confirm â€¢ ${formatCurrency(totals.total)}`}
        onPrimary={handleConfirmOrder}
        disabled={isConfirming}
        rightSlot={<button className="hidden sm:inline-flex items-center gap-1 rounded-full border border-gray-200 px-3 py-1 text-[12px] text-gray-700" onClick={handleNeedHelp}><MessageCircle className="h-3.5 w-3.5"/> Help</button>}
        primaryLabel={isConfirming ? 'Confirming...' : `Confirm ${formatCurrency(totals.total)}`}
      />

      {/* Bottom Tab Bar for quick jumps */}
      <AppBottomNav active={activeTab} onChange={scrollToSection} />
    </div>
  )
}
